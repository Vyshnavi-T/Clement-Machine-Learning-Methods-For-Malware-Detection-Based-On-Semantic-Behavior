import os

import pandas as pd
import pygal
from flask import Flask, render_template, request, session
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
import xgboost as xgb




# filepath=os.getcwd()
from sklearn.tree import DecisionTreeClassifier

app = Flask(__name__)

app.config['upload folder'] ='uploads'

@app.route('/')
def home():
    return render_template('index.html')



@app.route('/loaddata',methods=["POST","GET"])
def load_data():
    if request.method == "POST":
        file = request.files['file']
        filetype = os.path.splitext(file.filename)[1]
        print(filetype)
        if filetype == '.csv':
            path = os.path.join(app.config['upload folder'], file.filename)
            file.save(path)
            print(path)
            return render_template('load data.html', msg='success')
        else:
            return render_template('load data.html', msg='invalid')

    return render_template('load data.html')

@app.route("/viewdata")
def View_data():
    global df
    file = os.listdir(app.config['upload folder'])
    path = os.path.join(app.config['upload folder'],file[0])
    df = pd.read_csv(path)
    print(df)
    return render_template('view data.html',col_name = df.columns,row_val = list(df[:1000].values.tolist()))



# @app.route('/model',methods=["POST","GET"])
# def traintestdataset_submitted():
#     if request.method == "POST":
#         global X
#         print("hello")
#         value = request.form['traintestvalue']
#         value1=(value)
#         le = LabelEncoder()
#         x['Hash'] = le.fit_transform(x.hash)
#         X = x.drop(['hash'],axis = 1)
#         X['classification'].replace(to_replace={'malware':1,'benign':0},inplace =True)
#         new = X[['prio', 'static_prio', 'vm_truncate_count', 'free_area_cache', 'mm_users', 'map_count', 'shared_vm',
#                  'exec_vm', 'end_data', 'nvcsw', 'utime', 'Hash']]
#
#         # df1=x
#         #X = df1.drop("legitimate",axis=1)
#         y = X['classification']
#         print(y.head())
#         print(new.shape)
#         global X_train,X_test,y_train,y_test
#         X_train, X_test, y_train, y_test = train_test_split(new,y,test_size=float(value1),random_state = 10)
#         print("################")
#         # print(X_train)
#         # print("1")
#         # print(y_train)
#         # print("2")
#         print(y_test)
#         # print("$$$$$$$")
#         f(X_train,X_test, y_train, y_test)
#         X_train1 = pd.DataFrame(X_train)
#         X_trainlen=len(X_train)
#         y_test1 = pd.DataFrame(y_test)
#         y_testlen = len(y_test)
#         return render_template('traintestdataset.html',msg='sucess',data=X_train1.to_html(),X_trainlenvalue=X_trainlen,y_testlenval=y_testlen)
#     return render_template('traintestdataset.html')



@app.route('/model',methods=["POST","GET"])
def model():
    global accuracyscore,accuracyscore1,accuracyscore2
    if request.method == "POST":
        model = int(request.form['selected'])
        print(model)
        test = int(request.form['testsize'])
        testsize = test/100
        le = LabelEncoder()
        df['Hash'] = le.fit_transform(df.hash)
        X = df.drop(['hash'], axis=1)
        X['classification'].replace(to_replace={'malware': 1, 'benign': 0}, inplace=True)
        new = X[['prio', 'static_prio', 'vm_truncate_count', 'free_area_cache', 'mm_users', 'map_count', 'shared_vm',
                 'exec_vm', 'end_data', 'nvcsw', 'utime', 'Hash']]

        # df1=x
        # X = df1.drop("legitimate",axis=1)
        y = X['classification']
        # print(y.head())
        # print(new.shape)
        global X_train, X_test, y_train, y_test
        X_train, X_test, y_train, y_test = train_test_split(new, y, test_size=testsize, random_state=10)

        if (model == 1):
            model = xgb.XGBClassifier(n_estimators = 10,booster='gblinear')
            model.fit(X_train,y_train)
            y_pred = model.predict(X_test)
            accuracyscore = model.score(X_test,y_test)
            precisionscore = precision_score(y_test, y_pred, average='macro')
            recallscore = recall_score(y_test, y_pred, average='macro')
            return render_template('model.html', msg="accuracy_score", score=accuracyscore,
                                   model="XGboost")
        elif (model==2):
            model1 = DecisionTreeClassifier(splitter='random',max_depth =5,criterion = 'entropy' )
            model1.fit(X_train,y_train)
            accuracyscore1 = model1.score(X_test,y_test)
            print(accuracyscore)
            return render_template('model.html', msg="accuracy_score", score=accuracyscore1,
                                   model="Decision Tree Classifier")

        elif (model==3):
            model2 = SVC()
            model2.fit(X_train[:10000],y_train[:10000])
            accuracyscore2 = model2.score(X_test,y_test)
            return render_template('model.html', msg="accuracy_score", score=accuracyscore2,
                                   model="SupportVectorMachine")


    return render_template('model.html')

@app.route('/prediction', methods=["POST","GET"])
def prediction():
    print("hello")
    # global accuracyscore,accuracyscore1,accuracyscore2
    if request.method == "POST":
        a = int(request.form['char'])
        b = int(request.form['version1'])
        c = int(request.form['data'])# prio,static_prio,vm_truncate_count,free_area_cache,mm_users,map_count,shared_vm,exec_vm,end_data,nvcsw,utime,Hash
        d = int( request.form['version'])
        e = int(request.form['size'])
        f = int(request.form['machine'])
        g = int(request.form['uninitialised'])
        h = int(request.form['major'])
        i = int(request.form['minor'])
        j = int(request.form['enter'])
        k = int(request.form['entry'])
        l = int(request.form['base'])

        list1=([int(a),int(b),int(c),int(d),int(e),int(f),int(g),int(h),int(i),int(j),int(k),int(l)])
        model=DecisionTreeClassifier(splitter='random',criterion='entropy',max_depth=5)
        model.fit(X_train, y_train)
        print("predictions")
        # print(X_trains)
        print("y_train")
        print(y_train)
        # le = LabelEncoder()
        # print(l)
        # print([l])
        # ex = le.fit_transform(X_train.[l])
        # print(ex)
        # ex1 = [list1,ex]
        predi = model.predict([list1])
        pre = predi
        print(pre)
        return render_template('prediction.html',msg='predictsucess',predvalue=pre)
    return render_template('prediction.html')


@app.route("/graphs")
def graphs():
    bar_chart = pygal.Bar()
    bar_chart.title = 'Machine learning technique to detect behavior based malware '
    bar_chart.add('xgboost', accuracyscore)
    bar_chart.add('Decision Tree', accuracyscore1)
    bar_chart.add('svm',accuracyscore2)

    pie_data=bar_chart.render_data_uri()
    return render_template('graphs.html',pie_data=pie_data)


if __name__ == '__main__':
    app.secret_key = ".."
    app.run(debug=True)